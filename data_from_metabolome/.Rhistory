p<-ggplot(data=Frequencies[Frequencies$frequency>=0.95,],
aes(x=Names_of_Y,y=Names_of_X,color=frequency))+
geom_tile(size=0.75) +
scale_color_gradient2(midpoint=0.95,mid ='orange') +
theme_bw()+ylab('Levels of X')+xlab('m/z')
p
p<-ggplot(data=Frequencies[Frequencies$frequency>=0.95,],
aes(x=Names_of_Y,y=Names_of_X,color=frequency))+
geom_tile(size=0.75) +
scale_color_gradient2(midpoint=0.95,mid ='orange') +
theme_bw()+ylab('Levels of X')+
xlab('m/z')
p
p<-ggplot(data=Frequencies[Frequencies$frequency==1,],
aes(x=Names_of_Y,y=Names_of_X,color=Names_of_X))+
geom_point(size=1)+theme_bw()+ylab('Levels of X')+xlab('m/z')
p
sessionInfo()
p<-ggplot(data=Frequencies[Frequencies$frequency>=0.95,],
aes(x=Names_of_Y,y=Names_of_X,color=frequency))+
geom_tile(size=0.75) +
scale_color_gradient2(midpoint=0.95,mid ='orange') +
theme_bw()+ylab('Levels of X')+
xlab('m/z')
p
View(Frequencies)
View(Frequencies)
View(Frequencies)
knitr::opts_chunk$set(echo = TRUE)
library(MultiVarSel)
#library(BlockCov)
library(reshape)   ### pour utiliser la fonction melt pour les boxplots
```
#library(BlockCov)
library(reshape)   ### pour utiliser la fonction melt pour les boxplots
rm(list=ls())
#### Il faut d'abord installer MultiVarSel.tar.gz
#install.packages('MultiVarSel_1.0.tar.gz',repos=NULL)
#### Il faut au préalable installer glmnet et ggplot2
library(MultiVarSel)
#library(BlockCov)
library(reshape)   ### pour utiliser la fonction melt pour les boxplots
table1=read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table1[1:3,1:10]
dim(table1)
table1[,1]
table=table1[,-1]
table[1:3,1:5]
#### Creation d'une variable qualitative supplementaire pour enlever les noms des replicats
temperature<-rep(c("FROID", "STD", "CHAUD"), each=3)
table2<-data.frame(temperature,table) # nouveau tableau
table2[1:3,1:10]
which(colMeans(table2[,2:dim(table2)[2]])==0)
table1=read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table1[1:3,1:10]
dim(table1)
table1[,1]
table=table1[,-1]
table[1:3,1:5]
#### Creation d'une variable qualitative supplementaire pour enlever les noms des replicats
temperature<-rep(c("FROID", "STD", "CHAUD"), each=3)
table2<-data.frame(temperature,table) # nouveau tableau
table2[1:3,1:10]
#which(colMeans(table2[,2:dim(table2)[2]])==0)
which(apply(table2[,2:dim(table2)[2]],2,sd)==0)
which(is.na(table2))
Y  <- as.matrix(table2[, -1])
X <- model.matrix(lm(Y ~ temperature + 0,data=table2))
table1=read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table1[1:3,1:10]
dim(table1)
table1[,1]
table=table1[,-1]
table[1:3,1:5]
#### Creation d'une variable qualitative supplementaire pour enlever les noms des replicats
temperature<-rep(c("FROID", "STD", "CHAUD"), each=3)
table2<-data.frame(temperature,table) # nouveau tableau
table2[1:3,1:10]
which(colMeans(table2[,2:dim(table2)[2]])==0)
Y  <- as.matrix(table2[, -1])
X <- model.matrix(lm(Y ~ temperature + 0,data=table2))
## Definition of the residuals
residus=lm(as.matrix(Y)~X-1)$residuals
View(table)
View(table)
rm(list=ls())
#### Il faut d'abord installer MultiVarSel.tar.gz
#install.packages('MultiVarSel_1.0.tar.gz',repos=NULL)
#### Il faut au préalable installer glmnet et ggplot2
library(MultiVarSel)
#library(BlockCov)
library(reshape)   ### pour utiliser la fonction melt pour les boxplots
table1=read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table1[1:3,1:10]
dim(table1)
table1[,1]
table=table1[,-1]
table[1:3,1:5]
#### Creation d'une variable qualitative supplementaire pour enlever les noms des replicats
temperature<-rep(c("FROID", "STD", "CHAUD"), each=3)
table2<-data.frame(temperature,table) # nouveau tableau
table2[1:3,1:10]
which(colMeans(table2[,2:dim(table2)[2]])==0)
View(table)
View(table)
View(table1)
View(table2)
table1=read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table1[1:3,1:10]
dim(table1)
table1[,1]
table=table1[,-1]
#### Creation d'une variable qualitative supplementaire pour enlever les noms des replicats
temperature<-rep(c("FROID", "STD", "CHAUD"), each=3)
table2<-data.frame(temperature,table) # nouveau tableau
which(colMeans(table2[,2:dim(table2)[2]])==0)
table1=read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table=table1[,-1]
#### Creation d'une variable qualitative supplementaire pour enlever les noms des replicats
temperature<-rep(c("FROID", "STD", "CHAUD"), each=3)
table2<-data.frame(temperature,table) # nouveau tableau
which(colMeans(table2[ ,2:dim(table2)[2]])==0)
Y  <- as.matrix(table2[, -1])
X <- model.matrix(lm(Y ~ temperature + 0,data=table2))
View(table1)
View(table1)
Y  <- as.matrix(table2[ , -1])
X <- model.matrix(lm(Y ~ temperature + 0, data=table2))
View(Y)
View(Y)
dim(Y)
dim(temperature)
table1=read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table=table1[,-1]
#### Creation d'une variable qualitative supplementaire pour enlever les noms des replicats
temperature<-rep(c("FROID", "STD", "CHAUD"), each=3)
table2<-data.frame(temperature,table) # nouveau tableau
which(colMeans(table2[ ,2:dim(table2)[2]])==0)
dim(Y)
dim(temperature)
library(reshape)
library(ggplot2)
library(MultiVarSel)
library(reshape)
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
View(table)
View(table)
View(table1)
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
View(table1)
View(table1)
table = table1[ , -1]
View(table1)
View(table1)
View(table)
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table = table1[ , -1]
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table2 <- data.frame(temperature, table)
View(table2)
temperature
which(colMeans(table2[ ,2:dim(table2)[2]])==0)
which(colMeans(table2[ ,2: dim(table2)[2]])==0)
dim(table2)[2]
which(colMeans(table2[ ,2: dim(table2)[2]])==0)
which(colMeans(table2[ ,1: dim(table2)[2]])==0)
which(colMeans(table2[ ,2: dim(table2)[2]])==0)
which(colMeans(table2[ ,2: 198==0)
which(colMeans(table2[ ,2: 198]==0)
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table = table1[ , -1]
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table2 <- data.frame(temperature, table)
which(colMeans(table2[ ,2: 198]==0)
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table = table1[ , -1]
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table2 <- data.frame(temperature, table)
which(colMeans(table2[ ,2:198]==0)
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table = table1[ , -1]
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table2 <- data.frame(temperature, table)
which(colMeans(table2[,2:198]==0)
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table = table1[ , -1]
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table2 <- data.frame(temperature, table)
which(colMeans(table2[, 2:198]) == 0)
summary(table2)
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
summary(table)
summary(table1)
View(table2)
temperature
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table = table1[ , -1]
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table2 <- data.frame(temperature, table)
summary(table1)
str(table1)
table <- as.data.frame(lapply(table, as.numeric)
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table = table1[ , -1]
table <- as.data.frame(lapply(table, as.numeric)
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table = table1[ , -1]
table <- as.data.frame(lapply(table, as.numeric)
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table = table1[ , -1]
table <- as.data.frame(lapply(table, as.numeric))
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table2 <- data.frame(temperature, table)
table2[] <-
str(table1)
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table = table1[ , -1]
table <- as.data.frame(lapply(table, as.numeric))
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table2 <- data.frame(temperature, table)
str(table1)
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table = table1[ , -1]
table <- as.data.frame(lapply(table, as.numeric))
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table2 <- data.frame(temperature, table)
str(table)
table1 = read.table("metabolome_Ath.csv", sep=";", header=T, dec=",")
table = table1[ , -1]
table <- as.data.frame(lapply(table, as.numeric))
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table2 <- data.frame(temperature, table)
str(table2)
which(is.na(table2))
which(colMeans(table2[ ,2:dim(table2)[2]])==0)
which(apply(table2[,2:dim(table2)[2]],2,sd)==0)
which(is.na(table2))
Y  <- as.matrix(table2[ , -1])
X <- model.matrix(lm(Y ~ temperature + 0, data=table2))
p <- ncol(X)
n=nrow(X)
print(n)
q=dim(Y)[2]
print(q)
## Scaling the Y matrix (to force the empirical mean of each column
## to be 0 and the variance of each column to be 1)
Y=scale(Y)
## Definition of the residuals
residus=lm(as.matrix(Y)~X-1)$residuals
## Whitening test without using any whitening method
pvalue=whitening_test(residus)
print(pvalue)
## Testing the two dependence structures (parametric : AR1 and Nonparametric) : Toeplitz case
whitening_choice(residus, typeDeps = c("AR1","nonparam"), pAR = 1, qMA = 0)
## => We will use the nonparametric modeling.
square_root_inv_hat_Sigma=whitening(residus,"nonparam",pAR=1,qMA=0)
table1 = read.table("metabolome_Ath.csv", sep=";", header=TRUE, dec=",")
table = table1[ , -1]
#table <- as.data.frame(lapply(table, as.numeric))
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table2 <- data.frame(temperature, table)
str(table2)
table1 = read.table("metabolome_Ath.csv", sep=";", header=TRUE, dec=",")
table = table1[ , -1]
#table <- as.data.frame(lapply(table, as.numeric))
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table2 <- data.frame(temperature, table)
str(table2)
setwd("C:/Users/jhony/OneDrive/Imagens/2023-2024 Paris/AgroParisTech/premier année/UC à choix/BIG_Data_et_Omiques/data_from_metabolome")
table1 = read.table("metabolome_Ath.csv", sep=";", header=TRUE)
table = table1[ , -1]
setwd("C:/Users/jhony/OneDrive/Imagens/2023-2024 Paris/AgroParisTech/premier année/UC à choix/BIG_Data_et_Omiques/data_from_metabolome")
table1 = read.table("metabolome_Ath.csv", sep=";", header=TRUE)
table = table1[ , -1]
table1
temperature <- rep(c("FROID", "STD", "CHAUD"), each = 3)
table2 <- data.frame(temperature, table)
table2
str(table2)
table2
which(colMeans(table2[ ,2:dim(table2)[2]])==0)
which(apply(table2[,2:dim(table2)[2]],2,sd)==0)
which(is.na(table2))
Y  <- as.matrix(table2[ , -1])
X <- model.matrix(lm(Y ~ temperature + 0, data=table2))
p <- ncol(X)
n=nrow(X)
print(n)
q=dim(Y)[2]
print(q)
## Scaling the Y matrix (to force the empirical mean of each column
## to be 0 and the variance of each column to be 1)
Y=scale(Y)
## Definition of the residuals
residus=lm(as.matrix(Y)~X-1)$residuals
## Whitening test without using any whitening method
pvalue=whitening_test(residus)
print(pvalue)
## Testing the two dependence structures (parametric : AR1 and Nonparametric) : Toeplitz case
whitening_choice(residus, typeDeps = c("AR1","nonparam"), pAR = 1, qMA = 0)
## => We will use the nonparametric modeling.
square_root_inv_hat_Sigma=whitening(residus,"nonparam",pAR=1,qMA=0)
#### Modélisation par une matrice de covariance par blocs
res_block=Sigma_estimation(residus, k = NULL, kmax = min(100, (q - 1)), nb_nn0 = NULL, seq.nb = NULL, step = 10, prop.max = 0.7,
big = FALSE,reorder = TRUE,inv_12 = TRUE)
#### Modélisation par une matrice de covariance par blocs
res_block = Sigma_estimation(residus, k = NULL, kmax = min(100, (q - 1)), nb_nn0 = NULL, seq.nb = NULL, step = 10, prop.max = 0.7,
big = FALSE,reorder = TRUE,inv_12 = TRUE)
setwd("C:/Users/jhony/OneDrive/Imagens/2023-2024 Paris/AgroParisTech/premier année/UC à choix/BIG_Data_et_Omiques/data_from_metabolome")
setwd("C:/Users/jhony/OneDrive/Imagens/2023-2024 Paris/AgroParisTech/premier année/UC à choix/BIG_Data_et_Omiques/data_from_metabolome")
table1=read.table("metabolome_Ath.csv", sep=";", header=T)
table=table1[,-1]
table
#### Creation d'une variable qualitative supplementaire pour enlever les noms des replicats
temperature<-rep(c("FROID", "STD", "CHAUD"), each=3)
table2<-data.frame(temperature,table) # nouveau tableau
#### Creation d'une variable qualitative supplementaire pour enlever les noms des replicats
temperature<-rep(c("FROID", "STD", "CHAUD"), each=3)
table2<-data.frame(temperature,table) # nouveau tableau
which(colMeans(table2[ ,2:dim(table2)[2]])==0)
which(apply(table2[,2:dim(table2)[2]],2,sd)==0)
which(is.na(table2))
dim(Y)
dim(temperature)
Y  <- as.matrix(table2[ , -1])
X <- model.matrix(lm(Y ~ temperature + 0, data=table2))
p <- ncol(X)
n=nrow(X)
print(n)
q=dim(Y)[2]
print(q)
## Scaling the Y matrix (to force the empirical mean of each column
## to be 0 and the variance of each column to be 1)
Y=scale(Y)
summary(talbe2)
summary(table2)
summary(table2)[1]
summary(table2)[2]
summary(table2)
summary(table2)[ , 1]
summary(table2)[ , 2]
summary(table2)[ , 3]
summary(table2)[ , 4]
summary(table2)
library(BlockCov)
install.packages(BlockCov)
rm(list=ls())
install.packages(BlockCov)
library(MultiVarSel)
library(BlockCov)
rm(list=ls())
install.packages("BlockCov")
library(MultiVarSel)
library(BlockCov)
library(reshape)   ### pour utiliser la fonction melt pour les boxplots
library(MultiVarSel)
library(BlockCov)
library(reshape)   ### pour utiliser la fonction melt pour les boxplots
library(MultiVarSel)
library(BlockCov)
library(reshape)   ### pour utiliser la fonction melt pour les boxplots
Y  <- as.matrix(table2[ , -1])
table1=read.table("metabolome_Ath.csv", sep=";", header=T)
table=table1[,-1]
table
#### Making a new supplementary quantitative variable to associate the name of the experiments
temperature<-rep(c("FROID", "STD", "CHAUD"), each=3)
table2<-data.frame(temperature,table) # new table
which(colMeans(table2[ ,2:dim(table2)[2]])==0) # We ask the indices of the columns that are
# 0, to see if there is a column centered.
which(apply(table2[,2:dim(table2)[2]],2,sd)==0) #Asking if there is a column that's constant
which(is.na(table2)) #Seeing if there's any missing value
summary(table2)
setwd("C:/Users/jhony/OneDrive/Imagens/2023-2024 Paris/AgroParisTech/premier année/UC à choix/BIG_Data_et_Omiques/data_from_metabolome")
dim(Y)
Y  <- as.matrix(table2[ , -1])
X <- model.matrix(lm(Y ~ temperature + 0, data=table2))
p <- ncol(X)
n=nrow(X)
print(n)
q=dim(Y)[2]
print(q)
## Scaling the Y matrix (to force the empirical mean of each column
## to be 0 and the variance of each column to be 1)
Y=scale(Y)
## Definition of the residuals
residus=lm(as.matrix(Y)~X-1)$residuals
## Whitening test without using any whitening method
pvalue=whitening_test(residus)
print(pvalue)
## Testing the two dependence structures (parametric : AR1 and Nonparametric) : Toeplitz case
whitening_choice(residus, typeDeps = c("AR1","nonparam"), pAR = 1, qMA = 0)
## => We will use the nonparametric modeling.
square_root_inv_hat_Sigma=whitening(residus,"nonparam",pAR=1,qMA=0)
\end{pmatrix}
rm(list=ls())
library(MultiVarSel)
library(BlockCov)
library(reshape)   ### pour utiliser la fonction melt pour les boxplots
setwd("C:/Users/jhony/OneDrive/Imagens/2023-2024 Paris/AgroParisTech/premier année/UC à choix/BIG_Data_et_Omiques/data_from_metabolome")
table1=read.table("metabolome_Ath.csv", sep=";", header=T)
table=table1[,-1]
table
#### Making a new supplementary quantitative variable to associate the name of the experiments
temperature<-rep(c("FROID", "STD", "CHAUD"), each=3)
table2<-data.frame(temperature,table) # new table
which(colMeans(table2[ ,2:dim(table2)[2]])==0) # We ask the indices of the columns that are
# 0, to see if there is a column centered.
which(apply(table2[,2:dim(table2)[2]],2,sd)==0) #Asking if there is a column that's constant
which(is.na(table2)) #Seeing if there's any missing value
summary(table2)
Y  <- as.matrix(table2[ , -1])
X <- model.matrix(lm(Y ~ temperature + 0, data=table2))
p <- ncol(X)
n=nrow(X)
print(n)
q=dim(Y)[2]
print(q)
## Scaling the Y matrix (to force the empirical mean of each column
## to be 0 and the variance of each column to be 1)
Y=scale(Y)
Y  <- as.matrix(table2[ , -1])
X <- model.matrix(lm(Y ~ temperature + 0, data=table2))
p <- ncol(X)
n=nrow(X)
print(n)
q=dim(Y)[2]
print(q)
## Scaling the Y matrix (to force the empirical mean of each column
## to be 0 and the variance of each column to be 1)
Y=scale(Y)
## Definition of the residuals
residus=lm(as.matrix(Y)~X-1)$residuals
residus
## Definition of the residuals
residus=lm(as.matrix(Y)~X-1)$residuals
## Whitening test without using any whitening method
pvalue=whitening_test(residus)
residus
residus = lm(as.matrix(Y)~ X+0)$residuals
residus
residus1 = lm(as.matrix(Y)~ X+0)$residuals
## Whitening test without using any whitening method
pvalue=whitening_test(residus)
print(pvalue)
## Testing the two dependence structures (parametric : AR1 and Nonparametric) : Toeplitz case
whitening_choice(residus, typeDeps = c("AR1","nonparam"), pAR = 1, qMA = 0)
## => We will use the nonparametric modeling.
square_root_inv_hat_Sigma=whitening(residus,"nonparam",pAR=1,qMA=0)
residus1 = lm(as.matrix(Y)~ X+0)$residuals
## Definition of the residuals
residus=lm(as.matrix(Y)~X-1)$residuals
## Whitening test without using any whitening method
pvalue=whitening_test(residus)
print(pvalue)
## Testing the two dependence structures (parametric : AR1 and Nonparametric) : Toeplitz case
whitening_choice(residus, typeDeps = c("AR1","nonparam"), pAR = 1, qMA = 0)
## => We will use the nonparametric modeling.
square_root_inv_hat_Sigma=whitening(residus,"nonparam",pAR=1,qMA=0)
## Testing the two dependence structures (parametric : AR1 and Nonparametric) : Toeplitz case
whitening_choice(residus, typeDeps = c("AR1","nonparam", "ARMA"), pAR = 1, qMA = 0)
#### Sélection de variables
require(doMC) #### ne fonctionne pas sous windows
registerDoMC(cores=2)
install.packages("doMC")
#### Sélection de variables
require(doMC) #### ne fonctionne pas sous windows
registerDoMC(cores=2)
#### Sélection de variables
require(doMC) #### ne fonctionne pas sous windows
#registerDoMC(cores=2)
#Freqs=variable_selection(Y,X,square_root_inv_hat_Sigma,nb_repli=5000,parallel=TRUE,nb.cores=2)
# save(Freqs, file='Freqs_metabolome_Ath_TOEPLITZ_nbreplis_5000.Rdata')
load('Freqs_metabolome_Ath_TOEPLITZ_nbreplis_5000.Rdata')
seuil=0.93
Freqs$Names_of_X=gsub(pattern='temperature',replacement='',Freqs$Names_of_X)
install.packages("installr")
check.update.R()
library(installr)
library(installr)
check.update.R()
library(installr)
check.update.R()
check.update.R()
install.packages("installr")
install.packages("installr")
install.packages("installr")
install.packages("installr")
install.packages("installr")
library(installr)
check.update.R()
library(installr)
check.update.R()
install.packages("doMC")
install.packages("foreach")
install.packages("doParallel")
library(foreach)
library(doParallel)
#### Sélection de variables
require(doMC) #### ne fonctionne pas sous windows
registerDoMC(cores=2)
install.packages("doMC")
library(installr)
check.update.R()
